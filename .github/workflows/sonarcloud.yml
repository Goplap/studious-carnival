name: SonarCloud analysis

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  pull-requests: read

jobs:
  sonar-check:
    name: Sonar Check
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # 1) BEGIN: SonarScanner for .NET
      - name: SonarScanner Begin
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo "$env:USERPROFILE\.dotnet\tools" >> $env:GITHUB_PATH
          dotnet sonarscanner begin `
          /k:"Goplap_studious-carnival" `
          /o:"goplap" `
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
          /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" `
          /d:sonar.coverage.exclusions="**/*Tests/**,**/Program.cs" `
          /d:sonar.cpd.cs.minimumTokens=40 `
          /d:sonar.cpd.cs.minimumLines=5 `
          /d:sonar.exclusions=**/bin/**,**/obj/**,**/*.yml
        shell: pwsh

      # 2) BUILD
      - name: Restore
        run: dotnet restore NetSdrClient.sln
      
      - name: Build
        run: dotnet build NetSdrClient.sln -c Release --no-restore

      # 3) TEST with Coverage
      - name: Test NetSdrClientApp with coverage
        run: |
          dotnet test NetSdrClientAppTests/NetSdrClientAppTests.csproj `
            -c Release `
            --no-build `
            --collect:"XPlat Code Coverage" `
            --results-directory ./TestResults/NetSdrClientApp `
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        shell: pwsh

      - name: Test EchoServer with coverage
        run: |
          dotnet test EchoServerTests/EchoServerTests.csproj `
            -c Release `
            --no-build `
            --collect:"XPlat Code Coverage" `
            --results-directory ./TestResults/EchoServer `
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        shell: pwsh

      # 4) Move coverage files to expected location
      - name: Prepare coverage files
        run: |
          Get-ChildItem -Path ./TestResults -Recurse -Filter "coverage.opencover.xml" | ForEach-Object {
            Write-Host "Found: $($_.FullName)"
          }
        shell: pwsh

      # 5) END: SonarScanner
      - name: SonarScanner End
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        shell: pwsh
